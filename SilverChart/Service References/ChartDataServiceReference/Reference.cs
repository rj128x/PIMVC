//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.225
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverChart.ChartDataServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartAnswer", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartAnswer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.ChartDataServiceReference.ChartData DataField;
        
        private SilverChart.ChartDataServiceReference.ChartProperties PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartData Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartProperties Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartData", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.ChartDataServiceReference.ChartDataSerie[] SeriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartDataSerie[] Series {
            get {
                return this.SeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesField, value) != true)) {
                    this.SeriesField = value;
                    this.RaisePropertyChanged("Series");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartProperties", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartProperties : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.ChartDataServiceReference.ChartAxisProperties[] AxesField;
        
        private SilverChart.ChartDataServiceReference.ChartSerieProperties[] SeriesField;
        
        private SilverChart.ChartDataServiceReference.XAxisTypeEnum XAxisTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartAxisProperties[] Axes {
            get {
                return this.AxesField;
            }
            set {
                if ((object.ReferenceEquals(this.AxesField, value) != true)) {
                    this.AxesField = value;
                    this.RaisePropertyChanged("Axes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartSerieProperties[] Series {
            get {
                return this.SeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesField, value) != true)) {
                    this.SeriesField = value;
                    this.RaisePropertyChanged("Series");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.XAxisTypeEnum XAxisType {
            get {
                return this.XAxisTypeField;
            }
            set {
                if ((this.XAxisTypeField.Equals(value) != true)) {
                    this.XAxisTypeField = value;
                    this.RaisePropertyChanged("XAxisType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartDataSerie", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartDataSerie : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private SilverChart.ChartDataServiceReference.ChartDataPoint[] PointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartDataPoint[] Points {
            get {
                return this.PointsField;
            }
            set {
                if ((object.ReferenceEquals(this.PointsField, value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartDataPoint", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartDataPoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string XValField;
        
        private double YValField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XVal {
            get {
                return this.XValField;
            }
            set {
                if ((object.ReferenceEquals(this.XValField, value) != true)) {
                    this.XValField = value;
                    this.RaisePropertyChanged("XVal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YVal {
            get {
                return this.YValField;
            }
            set {
                if ((this.YValField.Equals(value) != true)) {
                    this.YValField = value;
                    this.RaisePropertyChanged("YVal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartAxisProperties", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartAxisProperties : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoField;
        
        private int IndexField;
        
        private double IntervalField;
        
        private double MaxField;
        
        private double MinField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Auto {
            get {
                return this.AutoField;
            }
            set {
                if ((this.AutoField.Equals(value) != true)) {
                    this.AutoField = value;
                    this.RaisePropertyChanged("Auto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Max {
            get {
                return this.MaxField;
            }
            set {
                if ((this.MaxField.Equals(value) != true)) {
                    this.MaxField = value;
                    this.RaisePropertyChanged("Max");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Min {
            get {
                return this.MinField;
            }
            set {
                if ((this.MinField.Equals(value) != true)) {
                    this.MinField = value;
                    this.RaisePropertyChanged("Min");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartSerieProperties", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public partial class ChartSerieProperties : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColorField;
        
        private bool EnabledField;
        
        private int LineWidthField;
        
        private bool MarkerField;
        
        private bool SecondaryXAxisField;
        
        private SilverChart.ChartDataServiceReference.ChartSerieType SerieTypeField;
        
        private string TagNameField;
        
        private string TitleField;
        
        private int YAxisIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LineWidth {
            get {
                return this.LineWidthField;
            }
            set {
                if ((this.LineWidthField.Equals(value) != true)) {
                    this.LineWidthField = value;
                    this.RaisePropertyChanged("LineWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Marker {
            get {
                return this.MarkerField;
            }
            set {
                if ((this.MarkerField.Equals(value) != true)) {
                    this.MarkerField = value;
                    this.RaisePropertyChanged("Marker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SecondaryXAxis {
            get {
                return this.SecondaryXAxisField;
            }
            set {
                if ((this.SecondaryXAxisField.Equals(value) != true)) {
                    this.SecondaryXAxisField = value;
                    this.RaisePropertyChanged("SecondaryXAxis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartSerieType SerieType {
            get {
                return this.SerieTypeField;
            }
            set {
                if ((this.SerieTypeField.Equals(value) != true)) {
                    this.SerieTypeField = value;
                    this.RaisePropertyChanged("SerieType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YAxisIndex {
            get {
                return this.YAxisIndexField;
            }
            set {
                if ((this.YAxisIndexField.Equals(value) != true)) {
                    this.YAxisIndexField = value;
                    this.RaisePropertyChanged("YAxisIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="XAxisTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public enum XAxisTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        auto = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        datetime = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartSerieType", Namespace="http://schemas.datacontract.org/2004/07/PILib.Chart")]
    public enum ChartSerieType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        line = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bar = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pie = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        column = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        radar = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stepLine = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        spline = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        quickLine = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        area = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedArea = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedArea100 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedColumn = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedColumn100 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedBar = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stackedBar100 = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        doughnut = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sectionFunnel = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        streamlineFunnel = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pyramid = 18,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphVyrabAnswer", Namespace="http://schemas.datacontract.org/2004/07/PILib.PBR")]
    public partial class GraphVyrabAnswer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.ChartDataServiceReference.GraphVyrabData[] CurrentValsField;
        
        private SilverChart.ChartDataServiceReference.GraphVyrabData[] HourValsField;
        
        private SilverChart.ChartDataServiceReference.ChartAnswer chartAnswerField;
        
        private System.DateTime dateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.GraphVyrabData[] CurrentVals {
            get {
                return this.CurrentValsField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentValsField, value) != true)) {
                    this.CurrentValsField = value;
                    this.RaisePropertyChanged("CurrentVals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.GraphVyrabData[] HourVals {
            get {
                return this.HourValsField;
            }
            set {
                if ((object.ReferenceEquals(this.HourValsField, value) != true)) {
                    this.HourValsField = value;
                    this.RaisePropertyChanged("HourVals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartAnswer chartAnswer {
            get {
                return this.chartAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.chartAnswerField, value) != true)) {
                    this.chartAnswerField = value;
                    this.RaisePropertyChanged("chartAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphVyrabData", Namespace="http://schemas.datacontract.org/2004/07/PILib.PBR")]
    public partial class GraphVyrabData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double DiffField;
        
        private double DiffProcField;
        
        private double FaktField;
        
        private string NameField;
        
        private double PlanField;
        
        private double RecomendedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diff {
            get {
                return this.DiffField;
            }
            set {
                if ((this.DiffField.Equals(value) != true)) {
                    this.DiffField = value;
                    this.RaisePropertyChanged("Diff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DiffProc {
            get {
                return this.DiffProcField;
            }
            set {
                if ((this.DiffProcField.Equals(value) != true)) {
                    this.DiffProcField = value;
                    this.RaisePropertyChanged("DiffProc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Fakt {
            get {
                return this.FaktField;
            }
            set {
                if ((this.FaktField.Equals(value) != true)) {
                    this.FaktField = value;
                    this.RaisePropertyChanged("Fakt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Plan {
            get {
                return this.PlanField;
            }
            set {
                if ((this.PlanField.Equals(value) != true)) {
                    this.PlanField = value;
                    this.RaisePropertyChanged("Plan");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Recomended {
            get {
                return this.RecomendedField;
            }
            set {
                if ((this.RecomendedField.Equals(value) != true)) {
                    this.RecomendedField = value;
                    this.RaisePropertyChanged("Recomended");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrognozDataType", Namespace="http://schemas.datacontract.org/2004/07/PILib.PrognozNB")]
    public enum PrognozDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PBRGekon = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PBRUser = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PFakt = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrognozRashodCalcType", Namespace="http://schemas.datacontract.org/2004/07/PILib.PrognozNB")]
    public enum PrognozRashodCalcType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        avg = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        min = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        max = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        fakt = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrognozNBAnswer", Namespace="http://schemas.datacontract.org/2004/07/PILib.PrognozNB")]
    public partial class PrognozNBAnswer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.ChartDataServiceReference.ChartAnswer ChartField;
        
        private System.DateTime DateField;
        
        private System.Collections.Generic.Dictionary<System.DateTime, double> PBR30Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.ChartDataServiceReference.ChartAnswer Chart {
            get {
                return this.ChartField;
            }
            set {
                if ((object.ReferenceEquals(this.ChartField, value) != true)) {
                    this.ChartField = value;
                    this.RaisePropertyChanged("Chart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.DateTime, double> PBR30 {
            get {
                return this.PBR30Field;
            }
            set {
                if ((object.ReferenceEquals(this.PBR30Field, value) != true)) {
                    this.PBR30Field = value;
                    this.RaisePropertyChanged("PBR30");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ChartDataServiceReference.ChartDataService")]
    public interface ChartDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChartDataService/getChartData", ReplyAction="urn:ChartDataService/getChartDataResponse")]
        System.IAsyncResult BegingetChartData(string fileNameData, string fileNameProperties, System.AsyncCallback callback, object asyncState);
        
        SilverChart.ChartDataServiceReference.ChartAnswer EndgetChartData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChartDataService/getRynokChart", ReplyAction="urn:ChartDataService/getRynokChartResponse")]
        System.IAsyncResult BegingetRynokChart(System.DateTime dateStart, System.DateTime dateEnd, string interval, bool recordedData, string fileNameProperties, System.AsyncCallback callback, object asyncState);
        
        SilverChart.ChartDataServiceReference.ChartAnswer EndgetRynokChart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChartDataService/getGraphVyrabData", ReplyAction="urn:ChartDataService/getGraphVyrabDataResponse")]
        System.IAsyncResult BegingetGraphVyrabData(System.DateTime dateStart, System.DateTime dateEnd, string fileNameProperties, System.AsyncCallback callback, object asyncState);
        
        SilverChart.ChartDataServiceReference.GraphVyrabAnswer EndgetGraphVyrabData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChartDataService/getPrognozNBFakt", ReplyAction="urn:ChartDataService/getPrognozNBFaktResponse")]
        System.IAsyncResult BegingetPrognozNBFakt(System.DateTime dateFakt, bool now, int hourStart, int minuteStart, SilverChart.ChartDataServiceReference.PrognozDataType prognozType, System.Collections.Generic.Dictionary<System.DateTime, double> userPBR, int sutkiCount, SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode, int faktMinutes, System.AsyncCallback callback, object asyncState);
        
        SilverChart.ChartDataServiceReference.PrognozNBAnswer EndgetPrognozNBFakt(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChartDataServiceChannel : SilverChart.ChartDataServiceReference.ChartDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.ChartDataServiceReference.ChartAnswer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.ChartDataServiceReference.ChartAnswer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getRynokChartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getRynokChartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.ChartDataServiceReference.ChartAnswer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.ChartDataServiceReference.ChartAnswer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getGraphVyrabDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getGraphVyrabDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.ChartDataServiceReference.GraphVyrabAnswer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.ChartDataServiceReference.GraphVyrabAnswer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPrognozNBFaktCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPrognozNBFaktCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.ChartDataServiceReference.PrognozNBAnswer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.ChartDataServiceReference.PrognozNBAnswer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChartDataServiceClient : System.ServiceModel.ClientBase<SilverChart.ChartDataServiceReference.ChartDataService>, SilverChart.ChartDataServiceReference.ChartDataService {
        
        private BeginOperationDelegate onBegingetChartDataDelegate;
        
        private EndOperationDelegate onEndgetChartDataDelegate;
        
        private System.Threading.SendOrPostCallback ongetChartDataCompletedDelegate;
        
        private BeginOperationDelegate onBegingetRynokChartDelegate;
        
        private EndOperationDelegate onEndgetRynokChartDelegate;
        
        private System.Threading.SendOrPostCallback ongetRynokChartCompletedDelegate;
        
        private BeginOperationDelegate onBegingetGraphVyrabDataDelegate;
        
        private EndOperationDelegate onEndgetGraphVyrabDataDelegate;
        
        private System.Threading.SendOrPostCallback ongetGraphVyrabDataCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPrognozNBFaktDelegate;
        
        private EndOperationDelegate onEndgetPrognozNBFaktDelegate;
        
        private System.Threading.SendOrPostCallback ongetPrognozNBFaktCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChartDataServiceClient() {
        }
        
        public ChartDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChartDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChartDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChartDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Не удалось установить CookieContainer. Убедитесь, что привязка содержит HttpCooki" +
                            "eContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getChartDataCompletedEventArgs> getChartDataCompleted;
        
        public event System.EventHandler<getRynokChartCompletedEventArgs> getRynokChartCompleted;
        
        public event System.EventHandler<getGraphVyrabDataCompletedEventArgs> getGraphVyrabDataCompleted;
        
        public event System.EventHandler<getPrognozNBFaktCompletedEventArgs> getPrognozNBFaktCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.ChartDataServiceReference.ChartDataService.BegingetChartData(string fileNameData, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetChartData(fileNameData, fileNameProperties, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.ChartDataServiceReference.ChartAnswer SilverChart.ChartDataServiceReference.ChartDataService.EndgetChartData(System.IAsyncResult result) {
            return base.Channel.EndgetChartData(result);
        }
        
        private System.IAsyncResult OnBegingetChartData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileNameData = ((string)(inValues[0]));
            string fileNameProperties = ((string)(inValues[1]));
            return ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).BegingetChartData(fileNameData, fileNameProperties, callback, asyncState);
        }
        
        private object[] OnEndgetChartData(System.IAsyncResult result) {
            SilverChart.ChartDataServiceReference.ChartAnswer retVal = ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).EndgetChartData(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetChartDataCompleted(object state) {
            if ((this.getChartDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getChartDataCompleted(this, new getChartDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getChartDataAsync(string fileNameData, string fileNameProperties) {
            this.getChartDataAsync(fileNameData, fileNameProperties, null);
        }
        
        public void getChartDataAsync(string fileNameData, string fileNameProperties, object userState) {
            if ((this.onBegingetChartDataDelegate == null)) {
                this.onBegingetChartDataDelegate = new BeginOperationDelegate(this.OnBegingetChartData);
            }
            if ((this.onEndgetChartDataDelegate == null)) {
                this.onEndgetChartDataDelegate = new EndOperationDelegate(this.OnEndgetChartData);
            }
            if ((this.ongetChartDataCompletedDelegate == null)) {
                this.ongetChartDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetChartDataCompleted);
            }
            base.InvokeAsync(this.onBegingetChartDataDelegate, new object[] {
                        fileNameData,
                        fileNameProperties}, this.onEndgetChartDataDelegate, this.ongetChartDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.ChartDataServiceReference.ChartDataService.BegingetRynokChart(System.DateTime dateStart, System.DateTime dateEnd, string interval, bool recordedData, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetRynokChart(dateStart, dateEnd, interval, recordedData, fileNameProperties, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.ChartDataServiceReference.ChartAnswer SilverChart.ChartDataServiceReference.ChartDataService.EndgetRynokChart(System.IAsyncResult result) {
            return base.Channel.EndgetRynokChart(result);
        }
        
        private System.IAsyncResult OnBegingetRynokChart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateStart = ((System.DateTime)(inValues[0]));
            System.DateTime dateEnd = ((System.DateTime)(inValues[1]));
            string interval = ((string)(inValues[2]));
            bool recordedData = ((bool)(inValues[3]));
            string fileNameProperties = ((string)(inValues[4]));
            return ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).BegingetRynokChart(dateStart, dateEnd, interval, recordedData, fileNameProperties, callback, asyncState);
        }
        
        private object[] OnEndgetRynokChart(System.IAsyncResult result) {
            SilverChart.ChartDataServiceReference.ChartAnswer retVal = ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).EndgetRynokChart(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetRynokChartCompleted(object state) {
            if ((this.getRynokChartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getRynokChartCompleted(this, new getRynokChartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getRynokChartAsync(System.DateTime dateStart, System.DateTime dateEnd, string interval, bool recordedData, string fileNameProperties) {
            this.getRynokChartAsync(dateStart, dateEnd, interval, recordedData, fileNameProperties, null);
        }
        
        public void getRynokChartAsync(System.DateTime dateStart, System.DateTime dateEnd, string interval, bool recordedData, string fileNameProperties, object userState) {
            if ((this.onBegingetRynokChartDelegate == null)) {
                this.onBegingetRynokChartDelegate = new BeginOperationDelegate(this.OnBegingetRynokChart);
            }
            if ((this.onEndgetRynokChartDelegate == null)) {
                this.onEndgetRynokChartDelegate = new EndOperationDelegate(this.OnEndgetRynokChart);
            }
            if ((this.ongetRynokChartCompletedDelegate == null)) {
                this.ongetRynokChartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetRynokChartCompleted);
            }
            base.InvokeAsync(this.onBegingetRynokChartDelegate, new object[] {
                        dateStart,
                        dateEnd,
                        interval,
                        recordedData,
                        fileNameProperties}, this.onEndgetRynokChartDelegate, this.ongetRynokChartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.ChartDataServiceReference.ChartDataService.BegingetGraphVyrabData(System.DateTime dateStart, System.DateTime dateEnd, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGraphVyrabData(dateStart, dateEnd, fileNameProperties, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.ChartDataServiceReference.GraphVyrabAnswer SilverChart.ChartDataServiceReference.ChartDataService.EndgetGraphVyrabData(System.IAsyncResult result) {
            return base.Channel.EndgetGraphVyrabData(result);
        }
        
        private System.IAsyncResult OnBegingetGraphVyrabData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateStart = ((System.DateTime)(inValues[0]));
            System.DateTime dateEnd = ((System.DateTime)(inValues[1]));
            string fileNameProperties = ((string)(inValues[2]));
            return ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).BegingetGraphVyrabData(dateStart, dateEnd, fileNameProperties, callback, asyncState);
        }
        
        private object[] OnEndgetGraphVyrabData(System.IAsyncResult result) {
            SilverChart.ChartDataServiceReference.GraphVyrabAnswer retVal = ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).EndgetGraphVyrabData(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetGraphVyrabDataCompleted(object state) {
            if ((this.getGraphVyrabDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGraphVyrabDataCompleted(this, new getGraphVyrabDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGraphVyrabDataAsync(System.DateTime dateStart, System.DateTime dateEnd, string fileNameProperties) {
            this.getGraphVyrabDataAsync(dateStart, dateEnd, fileNameProperties, null);
        }
        
        public void getGraphVyrabDataAsync(System.DateTime dateStart, System.DateTime dateEnd, string fileNameProperties, object userState) {
            if ((this.onBegingetGraphVyrabDataDelegate == null)) {
                this.onBegingetGraphVyrabDataDelegate = new BeginOperationDelegate(this.OnBegingetGraphVyrabData);
            }
            if ((this.onEndgetGraphVyrabDataDelegate == null)) {
                this.onEndgetGraphVyrabDataDelegate = new EndOperationDelegate(this.OnEndgetGraphVyrabData);
            }
            if ((this.ongetGraphVyrabDataCompletedDelegate == null)) {
                this.ongetGraphVyrabDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGraphVyrabDataCompleted);
            }
            base.InvokeAsync(this.onBegingetGraphVyrabDataDelegate, new object[] {
                        dateStart,
                        dateEnd,
                        fileNameProperties}, this.onEndgetGraphVyrabDataDelegate, this.ongetGraphVyrabDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.ChartDataServiceReference.ChartDataService.BegingetPrognozNBFakt(System.DateTime dateFakt, bool now, int hourStart, int minuteStart, SilverChart.ChartDataServiceReference.PrognozDataType prognozType, System.Collections.Generic.Dictionary<System.DateTime, double> userPBR, int sutkiCount, SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode, int faktMinutes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPrognozNBFakt(dateFakt, now, hourStart, minuteStart, prognozType, userPBR, sutkiCount, rashodCalcMode, faktMinutes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.ChartDataServiceReference.PrognozNBAnswer SilverChart.ChartDataServiceReference.ChartDataService.EndgetPrognozNBFakt(System.IAsyncResult result) {
            return base.Channel.EndgetPrognozNBFakt(result);
        }
        
        private System.IAsyncResult OnBegingetPrognozNBFakt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateFakt = ((System.DateTime)(inValues[0]));
            bool now = ((bool)(inValues[1]));
            int hourStart = ((int)(inValues[2]));
            int minuteStart = ((int)(inValues[3]));
            SilverChart.ChartDataServiceReference.PrognozDataType prognozType = ((SilverChart.ChartDataServiceReference.PrognozDataType)(inValues[4]));
            System.Collections.Generic.Dictionary<System.DateTime, double> userPBR = ((System.Collections.Generic.Dictionary<System.DateTime, double>)(inValues[5]));
            int sutkiCount = ((int)(inValues[6]));
            SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode = ((SilverChart.ChartDataServiceReference.PrognozRashodCalcType)(inValues[7]));
            int faktMinutes = ((int)(inValues[8]));
            return ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).BegingetPrognozNBFakt(dateFakt, now, hourStart, minuteStart, prognozType, userPBR, sutkiCount, rashodCalcMode, faktMinutes, callback, asyncState);
        }
        
        private object[] OnEndgetPrognozNBFakt(System.IAsyncResult result) {
            SilverChart.ChartDataServiceReference.PrognozNBAnswer retVal = ((SilverChart.ChartDataServiceReference.ChartDataService)(this)).EndgetPrognozNBFakt(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPrognozNBFaktCompleted(object state) {
            if ((this.getPrognozNBFaktCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPrognozNBFaktCompleted(this, new getPrognozNBFaktCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPrognozNBFaktAsync(System.DateTime dateFakt, bool now, int hourStart, int minuteStart, SilverChart.ChartDataServiceReference.PrognozDataType prognozType, System.Collections.Generic.Dictionary<System.DateTime, double> userPBR, int sutkiCount, SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode, int faktMinutes) {
            this.getPrognozNBFaktAsync(dateFakt, now, hourStart, minuteStart, prognozType, userPBR, sutkiCount, rashodCalcMode, faktMinutes, null);
        }
        
        public void getPrognozNBFaktAsync(System.DateTime dateFakt, bool now, int hourStart, int minuteStart, SilverChart.ChartDataServiceReference.PrognozDataType prognozType, System.Collections.Generic.Dictionary<System.DateTime, double> userPBR, int sutkiCount, SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode, int faktMinutes, object userState) {
            if ((this.onBegingetPrognozNBFaktDelegate == null)) {
                this.onBegingetPrognozNBFaktDelegate = new BeginOperationDelegate(this.OnBegingetPrognozNBFakt);
            }
            if ((this.onEndgetPrognozNBFaktDelegate == null)) {
                this.onEndgetPrognozNBFaktDelegate = new EndOperationDelegate(this.OnEndgetPrognozNBFakt);
            }
            if ((this.ongetPrognozNBFaktCompletedDelegate == null)) {
                this.ongetPrognozNBFaktCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPrognozNBFaktCompleted);
            }
            base.InvokeAsync(this.onBegingetPrognozNBFaktDelegate, new object[] {
                        dateFakt,
                        now,
                        hourStart,
                        minuteStart,
                        prognozType,
                        userPBR,
                        sutkiCount,
                        rashodCalcMode,
                        faktMinutes}, this.onEndgetPrognozNBFaktDelegate, this.ongetPrognozNBFaktCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverChart.ChartDataServiceReference.ChartDataService CreateChannel() {
            return new ChartDataServiceClientChannel(this);
        }
        
        private class ChartDataServiceClientChannel : ChannelBase<SilverChart.ChartDataServiceReference.ChartDataService>, SilverChart.ChartDataServiceReference.ChartDataService {
            
            public ChartDataServiceClientChannel(System.ServiceModel.ClientBase<SilverChart.ChartDataServiceReference.ChartDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetChartData(string fileNameData, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileNameData;
                _args[1] = fileNameProperties;
                System.IAsyncResult _result = base.BeginInvoke("getChartData", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.ChartDataServiceReference.ChartAnswer EndgetChartData(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.ChartDataServiceReference.ChartAnswer _result = ((SilverChart.ChartDataServiceReference.ChartAnswer)(base.EndInvoke("getChartData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetRynokChart(System.DateTime dateStart, System.DateTime dateEnd, string interval, bool recordedData, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = dateStart;
                _args[1] = dateEnd;
                _args[2] = interval;
                _args[3] = recordedData;
                _args[4] = fileNameProperties;
                System.IAsyncResult _result = base.BeginInvoke("getRynokChart", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.ChartDataServiceReference.ChartAnswer EndgetRynokChart(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.ChartDataServiceReference.ChartAnswer _result = ((SilverChart.ChartDataServiceReference.ChartAnswer)(base.EndInvoke("getRynokChart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetGraphVyrabData(System.DateTime dateStart, System.DateTime dateEnd, string fileNameProperties, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = dateStart;
                _args[1] = dateEnd;
                _args[2] = fileNameProperties;
                System.IAsyncResult _result = base.BeginInvoke("getGraphVyrabData", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.ChartDataServiceReference.GraphVyrabAnswer EndgetGraphVyrabData(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.ChartDataServiceReference.GraphVyrabAnswer _result = ((SilverChart.ChartDataServiceReference.GraphVyrabAnswer)(base.EndInvoke("getGraphVyrabData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPrognozNBFakt(System.DateTime dateFakt, bool now, int hourStart, int minuteStart, SilverChart.ChartDataServiceReference.PrognozDataType prognozType, System.Collections.Generic.Dictionary<System.DateTime, double> userPBR, int sutkiCount, SilverChart.ChartDataServiceReference.PrognozRashodCalcType rashodCalcMode, int faktMinutes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = dateFakt;
                _args[1] = now;
                _args[2] = hourStart;
                _args[3] = minuteStart;
                _args[4] = prognozType;
                _args[5] = userPBR;
                _args[6] = sutkiCount;
                _args[7] = rashodCalcMode;
                _args[8] = faktMinutes;
                System.IAsyncResult _result = base.BeginInvoke("getPrognozNBFakt", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.ChartDataServiceReference.PrognozNBAnswer EndgetPrognozNBFakt(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.ChartDataServiceReference.PrognozNBAnswer _result = ((SilverChart.ChartDataServiceReference.PrognozNBAnswer)(base.EndInvoke("getPrognozNBFakt", _args, result)));
                return _result;
            }
        }
    }
}
