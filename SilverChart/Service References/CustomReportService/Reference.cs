//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.225
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverChart.CustomReportService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomReport", Namespace="http://schemas.datacontract.org/2004/07/PILib.CustomReport")]
    public partial class CustomReport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverChart.CustomReportService.CustomReportSection MainSectionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverChart.CustomReportService.CustomReportSection MainSection {
            get {
                return this.MainSectionField;
            }
            set {
                if ((object.ReferenceEquals(this.MainSectionField, value) != true)) {
                    this.MainSectionField = value;
                    this.RaisePropertyChanged("MainSection");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomReportSection", Namespace="http://schemas.datacontract.org/2004/07/PILib.CustomReport")]
    public partial class CustomReportSection : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportSection> ChildrenField;
        
        private string FindStringField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportSection> Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FindString {
            get {
                return this.FindStringField;
            }
            set {
                if ((object.ReferenceEquals(this.FindStringField, value) != true)) {
                    this.FindStringField = value;
                    this.RaisePropertyChanged("FindString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomReportTags", Namespace="http://schemas.datacontract.org/2004/07/PILib.CustomReport")]
    public partial class CustomReportTags : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportDataString> TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportDataString> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomReportDataString", Namespace="http://schemas.datacontract.org/2004/07/PILib.CustomReport")]
    public partial class CustomReportDataString : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AvgDataField;
        
        private bool MaxDataField;
        
        private bool MinDataField;
        
        private string TagNameField;
        
        private string TagTitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AvgData {
            get {
                return this.AvgDataField;
            }
            set {
                if ((this.AvgDataField.Equals(value) != true)) {
                    this.AvgDataField = value;
                    this.RaisePropertyChanged("AvgData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MaxData {
            get {
                return this.MaxDataField;
            }
            set {
                if ((this.MaxDataField.Equals(value) != true)) {
                    this.MaxDataField = value;
                    this.RaisePropertyChanged("MaxData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MinData {
            get {
                return this.MinDataField;
            }
            set {
                if ((this.MinDataField.Equals(value) != true)) {
                    this.MinDataField = value;
                    this.RaisePropertyChanged("MinData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagTitle {
            get {
                return this.TagTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TagTitleField, value) != true)) {
                    this.TagTitleField = value;
                    this.RaisePropertyChanged("TagTitle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomReportStructure", Namespace="http://schemas.datacontract.org/2004/07/PILib.CustomReport")]
    public partial class CustomReportStructure : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportDataString> SelectedTagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverChart.CustomReportService.CustomReportDataString> SelectedTags {
            get {
                return this.SelectedTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedTagsField, value) != true)) {
                    this.SelectedTagsField = value;
                    this.RaisePropertyChanged("SelectedTags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="CustomReportService.CustomReportService")]
    public interface CustomReportService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:CustomReportService/getReport", ReplyAction="urn:CustomReportService/getReportResponse")]
        System.IAsyncResult BegingetReport(System.AsyncCallback callback, object asyncState);
        
        SilverChart.CustomReportService.CustomReport EndgetReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:CustomReportService/getReportTags", ReplyAction="urn:CustomReportService/getReportTagsResponse")]
        System.IAsyncResult BegingetReportTags(SilverChart.CustomReportService.CustomReportSection section, System.AsyncCallback callback, object asyncState);
        
        SilverChart.CustomReportService.CustomReportTags EndgetReportTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:CustomReportService/createReportXML", ReplyAction="urn:CustomReportService/createReportXMLResponse")]
        System.IAsyncResult BegincreateReportXML(string fileName, System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags, System.AsyncCallback callback, object asyncState);
        
        bool EndcreateReportXML(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:CustomReportService/createReportFromXML", ReplyAction="urn:CustomReportService/createReportFromXMLResponse")]
        System.IAsyncResult BegincreateReportFromXML(string fileName, System.AsyncCallback callback, object asyncState);
        
        SilverChart.CustomReportService.CustomReportStructure EndcreateReportFromXML(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CustomReportServiceChannel : SilverChart.CustomReportService.CustomReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.CustomReportService.CustomReport Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.CustomReportService.CustomReport)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getReportTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getReportTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.CustomReportService.CustomReportTags Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.CustomReportService.CustomReportTags)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class createReportXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createReportXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class createReportFromXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createReportFromXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverChart.CustomReportService.CustomReportStructure Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverChart.CustomReportService.CustomReportStructure)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomReportServiceClient : System.ServiceModel.ClientBase<SilverChart.CustomReportService.CustomReportService>, SilverChart.CustomReportService.CustomReportService {
        
        private BeginOperationDelegate onBegingetReportDelegate;
        
        private EndOperationDelegate onEndgetReportDelegate;
        
        private System.Threading.SendOrPostCallback ongetReportCompletedDelegate;
        
        private BeginOperationDelegate onBegingetReportTagsDelegate;
        
        private EndOperationDelegate onEndgetReportTagsDelegate;
        
        private System.Threading.SendOrPostCallback ongetReportTagsCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateReportXMLDelegate;
        
        private EndOperationDelegate onEndcreateReportXMLDelegate;
        
        private System.Threading.SendOrPostCallback oncreateReportXMLCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateReportFromXMLDelegate;
        
        private EndOperationDelegate onEndcreateReportFromXMLDelegate;
        
        private System.Threading.SendOrPostCallback oncreateReportFromXMLCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CustomReportServiceClient() {
        }
        
        public CustomReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Не удалось установить CookieContainer. Убедитесь, что привязка содержит HttpCooki" +
                            "eContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getReportCompletedEventArgs> getReportCompleted;
        
        public event System.EventHandler<getReportTagsCompletedEventArgs> getReportTagsCompleted;
        
        public event System.EventHandler<createReportXMLCompletedEventArgs> createReportXMLCompleted;
        
        public event System.EventHandler<createReportFromXMLCompletedEventArgs> createReportFromXMLCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.CustomReportService.CustomReportService.BegingetReport(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetReport(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.CustomReportService.CustomReport SilverChart.CustomReportService.CustomReportService.EndgetReport(System.IAsyncResult result) {
            return base.Channel.EndgetReport(result);
        }
        
        private System.IAsyncResult OnBegingetReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverChart.CustomReportService.CustomReportService)(this)).BegingetReport(callback, asyncState);
        }
        
        private object[] OnEndgetReport(System.IAsyncResult result) {
            SilverChart.CustomReportService.CustomReport retVal = ((SilverChart.CustomReportService.CustomReportService)(this)).EndgetReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetReportCompleted(object state) {
            if ((this.getReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getReportCompleted(this, new getReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getReportAsync() {
            this.getReportAsync(null);
        }
        
        public void getReportAsync(object userState) {
            if ((this.onBegingetReportDelegate == null)) {
                this.onBegingetReportDelegate = new BeginOperationDelegate(this.OnBegingetReport);
            }
            if ((this.onEndgetReportDelegate == null)) {
                this.onEndgetReportDelegate = new EndOperationDelegate(this.OnEndgetReport);
            }
            if ((this.ongetReportCompletedDelegate == null)) {
                this.ongetReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetReportCompleted);
            }
            base.InvokeAsync(this.onBegingetReportDelegate, null, this.onEndgetReportDelegate, this.ongetReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.CustomReportService.CustomReportService.BegingetReportTags(SilverChart.CustomReportService.CustomReportSection section, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetReportTags(section, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.CustomReportService.CustomReportTags SilverChart.CustomReportService.CustomReportService.EndgetReportTags(System.IAsyncResult result) {
            return base.Channel.EndgetReportTags(result);
        }
        
        private System.IAsyncResult OnBegingetReportTags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverChart.CustomReportService.CustomReportSection section = ((SilverChart.CustomReportService.CustomReportSection)(inValues[0]));
            return ((SilverChart.CustomReportService.CustomReportService)(this)).BegingetReportTags(section, callback, asyncState);
        }
        
        private object[] OnEndgetReportTags(System.IAsyncResult result) {
            SilverChart.CustomReportService.CustomReportTags retVal = ((SilverChart.CustomReportService.CustomReportService)(this)).EndgetReportTags(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetReportTagsCompleted(object state) {
            if ((this.getReportTagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getReportTagsCompleted(this, new getReportTagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getReportTagsAsync(SilverChart.CustomReportService.CustomReportSection section) {
            this.getReportTagsAsync(section, null);
        }
        
        public void getReportTagsAsync(SilverChart.CustomReportService.CustomReportSection section, object userState) {
            if ((this.onBegingetReportTagsDelegate == null)) {
                this.onBegingetReportTagsDelegate = new BeginOperationDelegate(this.OnBegingetReportTags);
            }
            if ((this.onEndgetReportTagsDelegate == null)) {
                this.onEndgetReportTagsDelegate = new EndOperationDelegate(this.OnEndgetReportTags);
            }
            if ((this.ongetReportTagsCompletedDelegate == null)) {
                this.ongetReportTagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetReportTagsCompleted);
            }
            base.InvokeAsync(this.onBegingetReportTagsDelegate, new object[] {
                        section}, this.onEndgetReportTagsDelegate, this.ongetReportTagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.CustomReportService.CustomReportService.BegincreateReportXML(string fileName, System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateReportXML(fileName, selectedTags, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverChart.CustomReportService.CustomReportService.EndcreateReportXML(System.IAsyncResult result) {
            return base.Channel.EndcreateReportXML(result);
        }
        
        private System.IAsyncResult OnBegincreateReportXML(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags = ((System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString>)(inValues[1]));
            return ((SilverChart.CustomReportService.CustomReportService)(this)).BegincreateReportXML(fileName, selectedTags, callback, asyncState);
        }
        
        private object[] OnEndcreateReportXML(System.IAsyncResult result) {
            bool retVal = ((SilverChart.CustomReportService.CustomReportService)(this)).EndcreateReportXML(result);
            return new object[] {
                    retVal};
        }
        
        private void OncreateReportXMLCompleted(object state) {
            if ((this.createReportXMLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createReportXMLCompleted(this, new createReportXMLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createReportXMLAsync(string fileName, System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags) {
            this.createReportXMLAsync(fileName, selectedTags, null);
        }
        
        public void createReportXMLAsync(string fileName, System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags, object userState) {
            if ((this.onBegincreateReportXMLDelegate == null)) {
                this.onBegincreateReportXMLDelegate = new BeginOperationDelegate(this.OnBegincreateReportXML);
            }
            if ((this.onEndcreateReportXMLDelegate == null)) {
                this.onEndcreateReportXMLDelegate = new EndOperationDelegate(this.OnEndcreateReportXML);
            }
            if ((this.oncreateReportXMLCompletedDelegate == null)) {
                this.oncreateReportXMLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateReportXMLCompleted);
            }
            base.InvokeAsync(this.onBegincreateReportXMLDelegate, new object[] {
                        fileName,
                        selectedTags}, this.onEndcreateReportXMLDelegate, this.oncreateReportXMLCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverChart.CustomReportService.CustomReportService.BegincreateReportFromXML(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateReportFromXML(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverChart.CustomReportService.CustomReportStructure SilverChart.CustomReportService.CustomReportService.EndcreateReportFromXML(System.IAsyncResult result) {
            return base.Channel.EndcreateReportFromXML(result);
        }
        
        private System.IAsyncResult OnBegincreateReportFromXML(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((SilverChart.CustomReportService.CustomReportService)(this)).BegincreateReportFromXML(fileName, callback, asyncState);
        }
        
        private object[] OnEndcreateReportFromXML(System.IAsyncResult result) {
            SilverChart.CustomReportService.CustomReportStructure retVal = ((SilverChart.CustomReportService.CustomReportService)(this)).EndcreateReportFromXML(result);
            return new object[] {
                    retVal};
        }
        
        private void OncreateReportFromXMLCompleted(object state) {
            if ((this.createReportFromXMLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createReportFromXMLCompleted(this, new createReportFromXMLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createReportFromXMLAsync(string fileName) {
            this.createReportFromXMLAsync(fileName, null);
        }
        
        public void createReportFromXMLAsync(string fileName, object userState) {
            if ((this.onBegincreateReportFromXMLDelegate == null)) {
                this.onBegincreateReportFromXMLDelegate = new BeginOperationDelegate(this.OnBegincreateReportFromXML);
            }
            if ((this.onEndcreateReportFromXMLDelegate == null)) {
                this.onEndcreateReportFromXMLDelegate = new EndOperationDelegate(this.OnEndcreateReportFromXML);
            }
            if ((this.oncreateReportFromXMLCompletedDelegate == null)) {
                this.oncreateReportFromXMLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateReportFromXMLCompleted);
            }
            base.InvokeAsync(this.onBegincreateReportFromXMLDelegate, new object[] {
                        fileName}, this.onEndcreateReportFromXMLDelegate, this.oncreateReportFromXMLCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverChart.CustomReportService.CustomReportService CreateChannel() {
            return new CustomReportServiceClientChannel(this);
        }
        
        private class CustomReportServiceClientChannel : ChannelBase<SilverChart.CustomReportService.CustomReportService>, SilverChart.CustomReportService.CustomReportService {
            
            public CustomReportServiceClientChannel(System.ServiceModel.ClientBase<SilverChart.CustomReportService.CustomReportService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetReport(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getReport", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.CustomReportService.CustomReport EndgetReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.CustomReportService.CustomReport _result = ((SilverChart.CustomReportService.CustomReport)(base.EndInvoke("getReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetReportTags(SilverChart.CustomReportService.CustomReportSection section, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = section;
                System.IAsyncResult _result = base.BeginInvoke("getReportTags", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.CustomReportService.CustomReportTags EndgetReportTags(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.CustomReportService.CustomReportTags _result = ((SilverChart.CustomReportService.CustomReportTags)(base.EndInvoke("getReportTags", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegincreateReportXML(string fileName, System.Collections.Generic.Dictionary<string, SilverChart.CustomReportService.CustomReportDataString> selectedTags, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileName;
                _args[1] = selectedTags;
                System.IAsyncResult _result = base.BeginInvoke("createReportXML", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndcreateReportXML(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("createReportXML", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegincreateReportFromXML(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("createReportFromXML", _args, callback, asyncState);
                return _result;
            }
            
            public SilverChart.CustomReportService.CustomReportStructure EndcreateReportFromXML(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverChart.CustomReportService.CustomReportStructure _result = ((SilverChart.CustomReportService.CustomReportStructure)(base.EndInvoke("createReportFromXML", _args, result)));
                return _result;
            }
        }
    }
}
